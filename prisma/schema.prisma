// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id                  String     @id @default(cuid())
  name                String?
  email               String?    @unique
  emailVerified       DateTime?  @map("email_verified")
  image               String?
  accounts            Account[]
  sessions            Session[]
  posts               Post[]
  Bookmark            Bookmark[]
  totalPostsCreated   Int        @default(0) // Tracks all-time created posts
  totalPostsUpdated   Int        @default(0) // Tracks all-time updated posts
  totalBookmarksAdded Int        @default(0) // Tracks total bookmarks created over time

  @@map("users")
}

model Post {
  id        Int        @id @default(autoincrement())
  title     String
  slug      String     @unique
  content   String // MDX content stored as text
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  Bookmark  Bookmark[]
}

// A User can have many Posts and many Bookmarks.
// A Post has one author (a User) and can be bookmarked by many users.
// A Bookmark links a single User and a single Post â€” making a many-to-many relationship between User and Post.

model Bookmark {
  id           Int      @id @default(autoincrement())
  userId       String
  postId       Int
  isBookmarked Boolean  @default(true)
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId]) // one bookmark per user-post combination
}
